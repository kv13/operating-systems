#include <stdio.h>
#include <stdlib.h>
#include<sys/wait.h>
#include <unistd.h>
#include <string.h>
void Callme(char* line ,char** args);
void Callexecution(char** args);
void Callexecution2(char** args,int* check);
int CallSeparation(char* line,char** a);
int call_find(char* line);
/*
int main(){
	char *argv[4]={"ls","-l","-a",NULL};
	int pid ;
	int status;
	printf("%s ",argv[4]);
	pid=fork();
	if(pid==0){
		execvp(argv[0],argv);
	}
	else if (pid<0)exit(1);
	else wait(&status);
	return 0;
}*/
int main(){
	int* check=(int*)malloc(sizeof(int));
	if(check==NULL){
		printf("cannot malloc sorryyy...");
		exit(1);
	}
	*(check)=1;
	int counter;
	int x;
	char line[513];
	char line1[513];
	char line2[513];
	char *args[64];
	char *args2[64];
	for(;;){
		printf("VERGO>");
		fgets(line,512,stdin);
		x=call_find(line);
		if(x==0){
			Callme(line,args);
			Callexecution(args);
		}
		if(x==1){
			counter=CallSeparation(line, args2);
			for(int i=0;i<counter;i++){
				printf("%s\n",args2[i]);
				Callme(args2[i],args);
				Callexecution(args);

			}
		}
		if(x==2){
			printf("for now do nothing\n");
			counter=CallSeparation(line,args2);
			for(int i=0;i<counter;i++){
				Callme(args2[i],args);
				//printf("%s\n",args2[i]);
				if(*(check)==1){
					Callexecution2(args,check);
				}
				if(*(check)==0){
					printf("sorry bad command retry\n");
					*check=1;
					break;
				}
			}
		}
	}
}
void Callme(char* line ,char** args){
	int i=0;
	char* token;
	token=strtok(line," \n\t\r");
	while(token!=NULL){
		args[i]=token;
		i++;
		token=strtok(NULL," \n\t\r");
	}
	args[i]=NULL;
}
int CallSeparation(char* line,char** a){
	int i=0;
	char* token1;
	token1=strtok(line,";&&");
	while(token1!=NULL){
		a[i]=token1;
		token1=strtok(NULL , ";&&");
		i++;
	}
	return i;
}
void Callexecution2(char** args,int* check){
	int pid;
	int status;
	pid=fork();
	if(pid<0)exit(1);
	else if(pid==0){
		execvp(args[0],args);
		*(check)=0;
		printf("command not found \n");
		//exit(EXIT_FAILURE);why this command mess up everything???
	}
	else wait(&status);
}
void Callexecution(char** args){
	int pid ;
	int status;
	pid=fork();
	if(pid<0)exit(1);
	else if(pid==0){
		execvp(args[0],args);
		printf("command not found\n");
		exit(EXIT_FAILURE);
	}
	else wait(&status);
}
int call_find(char* line){
	int x=0;
	for(int i=0;i<513;i++){
		if(line[i]==';'){
			x=1;
			return x;
		}
		else if (line[i]=='&' && line[i+1]=='&'){
			x=2;
			return x;
		}
	}
	return x;
}
